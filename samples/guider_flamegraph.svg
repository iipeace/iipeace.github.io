<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink">
        <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
        <!--NOTES: -->
        <defs>
                <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
                        <stop stop-color="#eeeeee" offset="5%"/>
                        <stop stop-color="#eeeeb0" offset="95%"/>
                </linearGradient>
        </defs>
        <style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:left; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
        <script type="text/ecmascript">
                <![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]>
                <![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]>
        </script>

    <rect x="0" y="0" width="100%" height="230" fill="url(#background)"/>
    <text id="title" x="50.0000%" y="24.00">Guider Flamegraph</text>
    <text id="subtitle" x="0.0000%" y="50.00">
[Top Usercall Summary] [Elapsed: 2.999] [SampleRate: 0.001] [find(653242): 43%(Usr/12%+Sys/31%)] [NrSamples: 1,667(55.6%)] [NrSymbols: 38]</text>
    <text id="details" x="10" y="213.00"></text>
    <text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text>
    <text id="search" x="1090" y="24.00">Search</text>
    <text id="matched" x="1090" y="213.00"></text>
    <svg id="frames" x="10" y="20" width="1180">
<g>
    <title>getdents64@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (472 samples, 28.5%)</title>
    <rect x="0.0000%" y="148" width="28.4680%" height="15" fill="rgb(189,183,107)"/>
    <text x="0.2500%" y="158.50"></text>
</g>
<g>
    <title>readdir64@GLIBC_2.2.5[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (472 samples, 28.5%)</title>
    <rect x="0.0000%" y="132" width="28.4680%" height="15" fill="rgb(0,139,139)"/>
    <text x="0.2500%" y="142.50"></text>
</g>
<g>
    <title>__fxstatat@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (109 samples, 6.6%)</title>
    <rect x="28.4680%" y="148" width="6.5742%" height="15" fill="rgb(3,169,244)"/>
    <text x="28.7180%" y="158.50"></text>
</g>
<g>
    <title>0x255e0[/usr/bin/find] (109 samples, 6.6%)</title>
    <rect x="28.4680%" y="132" width="6.5742%" height="15" fill="rgb(128,0,128)"/>
    <text x="28.7180%" y="142.50"></text>
</g>
<g>
    <title>close@GLIBC_2.4 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (4 samples, 0.2%)</title>
    <rect x="35.0422%" y="164" width="0.2413%" height="15" fill="rgb(0,100,0)"/>
    <text x="35.2922%" y="174.50"></text>
</g>
<g>
    <title>0x25b80[/usr/bin/find] (4 samples, 0.2%)</title>
    <rect x="35.0422%" y="148" width="0.2413%" height="15" fill="rgb(102,205,170)"/>
    <text x="35.2922%" y="158.50"></text>
</g>
<g>
    <title>0x25d80[/usr/bin/find] (4 samples, 0.2%)</title>
    <rect x="35.0422%" y="132" width="0.2413%" height="15" fill="rgb(0,250,154)"/>
    <text x="35.2922%" y="142.50"></text>
</g>
<g>
    <title>openat64@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (214 samples, 12.9%)</title>
    <rect x="35.2835%" y="164" width="12.9071%" height="15" fill="rgb(186,85,211)"/>
    <text x="35.5335%" y="174.50"></text>
</g>
<g>
    <title>0x39dd0[/usr/bin/find] (214 samples, 12.9%)</title>
    <rect x="35.2835%" y="148" width="12.9071%" height="15" fill="rgb(0,0,128)"/>
    <text x="35.5335%" y="158.50"></text>
</g>
<g>
    <title>0x1164d0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (36 samples, 2.2%)</title>
    <rect x="48.1906%" y="180" width="2.1713%" height="15" fill="rgb(250,235,215)"/>
    <text x="48.4406%" y="190.50"></text>
</g>
<g>
    <title>0xe1180[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (36 samples, 2.2%)</title>
    <rect x="48.1906%" y="164" width="2.1713%" height="15" fill="rgb(33,150,243)"/>
    <text x="48.4406%" y="174.50"></text>
</g>
<g>
    <title>0x1164d0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (27 samples, 1.6%)</title>
    <rect x="50.3619%" y="164" width="1.6285%" height="15" fill="rgb(210,180,140)"/>
    <text x="50.6119%" y="174.50"></text>
</g>
<g>
    <title>__fxstat@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (51 samples, 3.1%)</title>
    <rect x="51.9903%" y="164" width="3.0760%" height="15" fill="rgb(128,128,128)"/>
    <text x="52.2403%" y="174.50"></text>
</g>
<g>
    <title>fdopendir[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (114 samples, 6.9%)</title>
    <rect x="48.1906%" y="148" width="6.8758%" height="15" fill="rgb(244,67,54)"/>
    <text x="48.4406%" y="158.50"></text>
</g>
<g>
    <title>0x39e50[/usr/bin/find] (328 samples, 19.8%)</title>
    <rect x="35.2835%" y="132" width="19.7829%" height="15" fill="rgb(210,105,30)"/>
    <text x="35.5335%" y="142.50"></text>
</g>
<g>
    <title>0x116580 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (47 samples, 2.8%)</title>
    <rect x="55.0663%" y="164" width="2.8347%" height="15" fill="rgb(50,205,50)"/>
    <text x="55.3163%" y="174.50"></text>
</g>
<g>
    <title>fcntl@GLIBC_2.2.5[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (47 samples, 2.8%)</title>
    <rect x="55.0663%" y="148" width="2.8347%" height="15" fill="rgb(160,82,45)"/>
    <text x="55.3163%" y="158.50"></text>
</g>
<g>
    <title>0x25220[/usr/bin/find] (47 samples, 2.8%)</title>
    <rect x="55.0663%" y="132" width="2.8347%" height="15" fill="rgb(153,50,204)"/>
    <text x="55.3163%" y="142.50"></text>
</g>
<g>
    <title>__close_nocancel@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (50 samples, 3.0%)</title>
    <rect x="57.9011%" y="132" width="3.0157%" height="15" fill="rgb(34,139,34)"/>
    <text x="58.1511%" y="142.50"></text>
</g>
<g>
    <title>0x261b0[/usr/bin/find] (1,010 samples, 60.9%)</title>
    <rect x="0.0000%" y="116" width="60.9168%" height="15" fill="rgb(63,81,181)"/>
    <text x="0.2500%" y="126.50"></text>
</g>
<g>
    <title>__fxstatat@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (241 samples, 14.5%)</title>
    <rect x="60.9168%" y="132" width="14.5356%" height="15" fill="rgb(222,184,135)"/>
    <text x="61.1668%" y="142.50"></text>
</g>
<g>
    <title>0x255e0[/usr/bin/find] (241 samples, 14.5%)</title>
    <rect x="60.9168%" y="116" width="14.5356%" height="15" fill="rgb(158,158,158)"/>
    <text x="61.1668%" y="126.50"></text>
</g>
<g>
    <title>close@GLIBC_2.4 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (48 samples, 2.9%)</title>
    <rect x="75.4524%" y="148" width="2.8951%" height="15" fill="rgb(165,42,42)"/>
    <text x="75.7024%" y="158.50"></text>
</g>
<g>
    <title>0x25b80[/usr/bin/find] (48 samples, 2.9%)</title>
    <rect x="75.4524%" y="132" width="2.8951%" height="15" fill="rgb(70,130,180)"/>
    <text x="75.7024%" y="142.50"></text>
</g>
<g>
    <title>openat64@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (5 samples, 0.3%)</title>
    <rect x="78.3474%" y="148" width="0.3016%" height="15" fill="rgb(107,142,35)"/>
    <text x="78.5974%" y="158.50"></text>
</g>
<g>
    <title>0x39dd0[/usr/bin/find] (5 samples, 0.3%)</title>
    <rect x="78.3474%" y="132" width="0.3016%" height="15" fill="rgb(127,255,212)"/>
    <text x="78.5974%" y="142.50"></text>
</g>
<g>
    <title>__fxstat@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (2 samples, 0.1%)</title>
    <rect x="78.6490%" y="132" width="0.1206%" height="15" fill="rgb(0,0,205)"/>
    <text x="78.8990%" y="142.50"></text>
</g>
<g>
    <title>0x25d80[/usr/bin/find] (55 samples, 3.3%)</title>
    <rect x="75.4524%" y="116" width="3.3172%" height="15" fill="rgb(184,134,11)"/>
    <text x="75.7024%" y="126.50"></text>
</g>
<g>
    <title>0x27170[/usr/bin/find] (1,306 samples, 78.8%)</title>
    <rect x="0.0000%" y="100" width="78.7696%" height="15" fill="rgb(250,128,114)"/>
    <text x="0.2500%" y="110.50"></text>
</g>
<g>
    <title>close@GLIBC_2.4 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (176 samples, 10.6%)</title>
    <rect x="78.7696%" y="116" width="10.6152%" height="15" fill="rgb(139,0,0)"/>
    <text x="79.0196%" y="126.50"></text>
</g>
<g>
    <title>0x8960[/usr/bin/find] (176 samples, 10.6%)</title>
    <rect x="78.7696%" y="100" width="10.6152%" height="15" fill="rgb(75,0,130)"/>
    <text x="79.0196%" y="110.50"></text>
</g>
<g>
    <title>0x116580 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (74 samples, 4.5%)</title>
    <rect x="89.3848%" y="148" width="4.4632%" height="15" fill="rgb(255,99,71)"/>
    <text x="89.6348%" y="158.50"></text>
</g>
<g>
    <title>fcntl@GLIBC_2.2.5[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (74 samples, 4.5%)</title>
    <rect x="89.3848%" y="132" width="4.4632%" height="15" fill="rgb(176,224,230)"/>
    <text x="89.6348%" y="142.50"></text>
</g>
<g>
    <title>0x25220[/usr/bin/find] (74 samples, 4.5%)</title>
    <rect x="89.3848%" y="116" width="4.4632%" height="15" fill="rgb(255,160,122)"/>
    <text x="89.6348%" y="126.50"></text>
</g>
<g>
    <title>0x88e0[/usr/bin/find] (74 samples, 4.5%)</title>
    <rect x="89.3848%" y="100" width="4.4632%" height="15" fill="rgb(233,150,122)"/>
    <text x="89.6348%" y="110.50"></text>
</g>
<g>
    <title>0x799e0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (6 samples, 0.4%)</title>
    <rect x="93.8480%" y="164" width="0.3619%" height="15" fill="rgb(255,250,205)"/>
    <text x="94.0980%" y="174.50"></text>
</g>
<g>
    <title>__fprintf_chk@GLIBC_2.14[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (6 samples, 0.4%)</title>
    <rect x="93.8480%" y="148" width="0.3619%" height="15" fill="rgb(188,143,143)"/>
    <text x="94.0980%" y="158.50"></text>
</g>
<g>
    <title>0x171b0[/usr/bin/find] (6 samples, 0.4%)</title>
    <rect x="93.8480%" y="132" width="0.3619%" height="15" fill="rgb(47,79,79)"/>
    <text x="94.0980%" y="142.50"></text>
</g>
<g>
    <title>0x98d0[/usr/bin/find] (6 samples, 0.4%)</title>
    <rect x="93.8480%" y="116" width="0.3619%" height="15" fill="rgb(72,61,139)"/>
    <text x="94.0980%" y="126.50"></text>
</g>
<g>
    <title>0xede0[/usr/bin/find] (6 samples, 0.4%)</title>
    <rect x="93.8480%" y="100" width="0.3619%" height="15" fill="rgb(0,255,127)"/>
    <text x="94.0980%" y="110.50"></text>
</g>
<g>
    <title>0x8990[/usr/bin/find] (1,562 samples, 94.2%)</title>
    <rect x="0.0000%" y="84" width="94.2099%" height="15" fill="rgb(255,165,0)"/>
    <text x="0.2500%" y="94.50"></text>
</g>
<g>
    <title>0x83e0[/usr/bin/find] (1,562 samples, 94.2%)</title>
    <rect x="0.0000%" y="68" width="94.2099%" height="15" fill="rgb(46,139,87)"/>
    <text x="0.2500%" y="78.50"></text>
</g>
<g>
    <title>__libc_start_main@GLIBC_2.2.5[/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1,562 samples, 94.2%)</title>
    <rect x="0.0000%" y="52" width="94.2099%" height="15" fill="rgb(175,238,238)"/>
    <text x="0.2500%" y="62.50"></text>
</g>
<g>
    <title>0x8660[/usr/bin/find] (1,562 samples, 94.2%)</title>
    <rect x="0.0000%" y="36" width="94.2099%" height="15" fill="rgb(199,21,133)"/>
    <text x="0.2500%" y="46.50"></text>
</g>
<g>
    <title>0xbed20 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (9 samples, 0.5%)</title>
    <rect x="94.2099%" y="36" width="0.5428%" height="15" fill="rgb(205,220,57)"/>
    <text x="94.4599%" y="46.50"></text>
</g>
<g>
    <title>write@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (9 samples, 0.5%)</title>
    <rect x="94.7527%" y="36" width="0.5428%" height="15" fill="rgb(138,43,226)"/>
    <text x="95.0027%" y="46.50"></text>
</g>
<g>
    <title>0xb4d30 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (9 samples, 0.5%)</title>
    <rect x="95.2955%" y="36" width="0.5428%" height="15" fill="rgb(0,128,0)"/>
    <text x="95.5455%" y="46.50"></text>
</g>
<g>
    <title>0x9abf0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (9 samples, 0.5%)</title>
    <rect x="95.8384%" y="36" width="0.5428%" height="15" fill="rgb(240,128,128)"/>
    <text x="96.0884%" y="46.50"></text>
</g>
<g>
    <title>_IO_file_xsputn@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (6 samples, 0.4%)</title>
    <rect x="96.3812%" y="36" width="0.3619%" height="15" fill="rgb(245,245,220)"/>
    <text x="96.6312%" y="46.50"></text>
</g>
<g>
    <title>0x8990 [/usr/bin/find] (5 samples, 0.3%)</title>
    <rect x="96.7431%" y="36" width="0.3016%" height="15" fill="rgb(238,232,170)"/>
    <text x="96.9931%" y="46.50"></text>
</g>
<g>
    <title>0x999c0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (5 samples, 0.3%)</title>
    <rect x="97.0446%" y="36" width="0.3016%" height="15" fill="rgb(123,104,238)"/>
    <text x="97.2946%" y="46.50"></text>
</g>
<g>
    <title>0x261b0 [/usr/bin/find] (5 samples, 0.3%)</title>
    <rect x="97.3462%" y="36" width="0.3016%" height="15" fill="rgb(32,178,170)"/>
    <text x="97.5962%" y="46.50"></text>
</g>
<g>
    <title>0x27170 [/usr/bin/find] (4 samples, 0.2%)</title>
    <rect x="97.6478%" y="36" width="0.2413%" height="15" fill="rgb(255,215,0)"/>
    <text x="97.8978%" y="46.50"></text>
</g>
<g>
    <title>malloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (4 samples, 0.2%)</title>
    <rect x="97.8890%" y="36" width="0.2413%" height="15" fill="rgb(255,140,0)"/>
    <text x="98.1390%" y="46.50"></text>
</g>
<g>
    <title>0xb4820 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (3 samples, 0.2%)</title>
    <rect x="98.1303%" y="36" width="0.1809%" height="15" fill="rgb(221,160,221)"/>
    <text x="98.3803%" y="46.50"></text>
</g>
<g>
    <title>0x171b0 [/usr/bin/find] (3 samples, 0.2%)</title>
    <rect x="98.3112%" y="36" width="0.1809%" height="15" fill="rgb(192,192,192)"/>
    <text x="98.5612%" y="46.50"></text>
</g>
<g>
    <title>readdir64@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (3 samples, 0.2%)</title>
    <rect x="98.4922%" y="36" width="0.1809%" height="15" fill="rgb(127,255,0)"/>
    <text x="98.7422%" y="46.50"></text>
</g>
<g>
    <title>0x258a0 [/usr/bin/find] (3 samples, 0.2%)</title>
    <rect x="98.6731%" y="36" width="0.1809%" height="15" fill="rgb(255,255,224)"/>
    <text x="98.9231%" y="46.50"></text>
</g>
<g>
    <title>_pthread_cleanup_push_defer@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libpthread-2.31.so] (3 samples, 0.2%)</title>
    <rect x="98.8540%" y="36" width="0.1809%" height="15" fill="rgb(135,206,250)"/>
    <text x="99.1040%" y="46.50"></text>
</g>
<g>
    <title>0xede0 [/usr/bin/find] (2 samples, 0.1%)</title>
    <rect x="99.0350%" y="36" width="0.1206%" height="15" fill="rgb(205,92,92)"/>
    <text x="99.2850%" y="46.50"></text>
</g>
<g>
    <title>0x79e0 [/usr/bin/find] (2 samples, 0.1%)</title>
    <rect x="99.1556%" y="36" width="0.1206%" height="15" fill="rgb(148,0,211)"/>
    <text x="99.4056%" y="46.50"></text>
</g>
<g>
    <title>0x39dd0 [/usr/bin/find] (1 samples, 0.1%)</title>
    <rect x="99.2762%" y="36" width="0.0603%" height="15" fill="rgb(219,112,147)"/>
    <text x="99.5262%" y="46.50"></text>
</g>
<g>
    <title>0x37e80 [/usr/bin/find] (1 samples, 0.1%)</title>
    <rect x="99.3366%" y="36" width="0.0603%" height="15" fill="rgb(0,255,255)"/>
    <text x="99.5866%" y="46.50"></text>
</g>
<g>
    <title>free@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.3969%" y="36" width="0.0603%" height="15" fill="rgb(240,230,140)"/>
    <text x="99.6469%" y="46.50"></text>
</g>
<g>
    <title>brk@GLIBC_2.28 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.4572%" y="36" width="0.0603%" height="15" fill="rgb(154,205,50)"/>
    <text x="99.7072%" y="46.50"></text>
</g>
<g>
    <title>0x18250 [/usr/bin/find] (1 samples, 0.1%)</title>
    <rect x="99.5175%" y="36" width="0.0603%" height="15" fill="rgb(255,235,59)"/>
    <text x="99.7675%" y="46.50"></text>
</g>
<g>
    <title>0xe5e0 [/usr/bin/find] (1 samples, 0.1%)</title>
    <rect x="99.5778%" y="36" width="0.0603%" height="15" fill="rgb(139,195,74)"/>
    <text x="99.8278%" y="46.50"></text>
</g>
<g>
    <title>0x98a20 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.6381%" y="36" width="0.0603%" height="15" fill="rgb(60,179,113)"/>
    <text x="99.8881%" y="46.50"></text>
</g>
<g>
    <title>0x255e0 [/usr/bin/find] (1 samples, 0.1%)</title>
    <rect x="99.6984%" y="36" width="0.0603%" height="15" fill="rgb(85,107,47)"/>
    <text x="99.9484%" y="46.50"></text>
</g>
<g>
    <title>__fprintf_chk@GLIBC_2.14 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.7587%" y="36" width="0.0603%" height="15" fill="rgb(255,192,203)"/>
    <text x="100.0087%" y="46.50"></text>
</g>
<g>
    <title>_IO_file_write@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.8191%" y="36" width="0.0603%" height="15" fill="rgb(224,255,255)"/>
    <text x="100.0691%" y="46.50"></text>
</g>
<g>
    <title>_IO_file_overflow@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.8794%" y="36" width="0.0603%" height="15" fill="rgb(106,90,205)"/>
    <text x="100.1294%" y="46.50"></text>
</g>
<g>
    <title>0xbed00 [/usr/lib/x86_64-linux-gnu/libc-2.31.so] (1 samples, 0.1%)</title>
    <rect x="99.9397%" y="36" width="0.0603%" height="15" fill="rgb(255,127,80)"/>
    <text x="100.1897%" y="46.50"></text>
</g>
</svg></svg>